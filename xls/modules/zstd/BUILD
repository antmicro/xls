# Copyright 2023 The XLS Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Build rules for XLS ZSTD codec implementation.

load("@rules_hdl//place_and_route:build_defs.bzl", "place_and_route")
load("@rules_hdl//synthesis:build_defs.bzl", "benchmark_synth", "synthesize_rtl")
load("@rules_hdl//verilog:providers.bzl", "verilog_library")
load(
    "//xls/build_rules:xls_build_defs.bzl",
    "xls_benchmark_ir",
    "xls_dslx_library",
    "xls_dslx_test",
    "xls_dslx_verilog",
)

package(
    default_applicable_licenses = ["//:license"],
    default_visibility = ["//xls:xls_users"],
    licenses = ["notice"],
)

xls_dslx_library(
    name = "buffer_dslx",
    srcs = [
        "buffer.x",
    ],
)

xls_dslx_test(
    name = "buffer_dslx_test",
    library = ":buffer_dslx",
)

xls_dslx_library(
    name = "magic_dslx",
    srcs = [
        "magic.x",
    ],
    deps = [
        ":buffer_dslx",
    ]
)

xls_dslx_test(
    name = "magic_dslx_test",
    library = ":magic_dslx",
)

cc_library(
    name = "zstd_test_data_generator",
    srcs = ["zstd_test_data_generator.cc"],
    hdrs = ["zstd_test_data_generator.h"],
    data = [
        "@com_github_facebook_zstd//:decodecorpus",
    ],
)

xls_dslx_library(
    name = "frame_header_dslx",
    srcs = [
        "frame_header.x",
    ],
    deps = [
        ":buffer_dslx",
    ],
)

xls_dslx_test(
    name = "zstd_frame_header_dslx_test",
    library = ":zstd_frame_header_dslx",
)

xls_dslx_verilog(
    name = "frame_header_verilog",
    codegen_args = {
        "module_name": "FrameHeaderDecoder",
        "delay_model": "asap7",
        "pipeline_stages": "9",
        "use_system_verilog": "false",
    },
    dslx_top = "parse_frame_header_128",
    library = ":frame_header_test_dslx",
    verilog_file = "frame_header.v",
)

xls_benchmark_ir(
    name = "frame_header_opt_ir_benchmark",
    src = ":frame_header_verilog.opt.ir",
    benchmark_ir_args = {
        "pipeline_stages": "9",
        "delay_model": "asap7",
    },
)

verilog_library(
    name = "frame_header_verilog_lib",
    srcs = [
        ":frame_header.v",
    ],
)

synthesize_rtl(
    name = "frame_header_synth_asap7",
    standard_cells = "@org_theopenroadproject_asap7sc7p5t_28//:asap7-sc7p5t_rev28_rvt",
    top_module = "FrameHeaderDecoder",
    deps = [
        ":frame_header_verilog_lib",
    ],
)

benchmark_synth(
    name = "frame_header_benchmark_synth",
    synth_target = ":frame_header_synth_asap7",
)

place_and_route(
    name = "frame_header_place_and_route",
    clock_period = "750",
    core_padding_microns = 2,
    min_pin_distance = "0.5",
    placement_density = "0.30",
    skip_detailed_routing = True,
    synthesized_rtl = ":frame_header_synth_asap7",
    target_die_utilization_percentage = "10",
)
